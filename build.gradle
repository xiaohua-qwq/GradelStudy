plugins {
    id 'java'
    id 'war'
    id 'application'
}

group = 'com.atguigu'
version = '1.0-SNAPSHOT'

mainClassName = 'com.atguigu.app.Application'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework:spring-beans:4.1.7.RELEASE'
    implementation 'org.springframework:spring-web:4.1.7.RELEASE'
    implementation 'org.springframework:spring-webmvc:4.1.7.RELEASE'
    implementation 'org.springframework:spring-tx:4.1.7.RELEASE'
    implementation 'org.springframework:spring-test:4.0.5.RELEASE'
    implementation 'org.springframework:spring-jdbc:4.1.7.RELEASE'

    implementation 'org.mybatis:mybatis-spring:1.2.3'
    implementation 'org.mybatis:mybatis:3.3.0'

    implementation 'mysql:mysql-connector-java:5.1.36'
    implementation 'com.alibaba:druid:1.0.15'

    implementation "com.fasterxml.jackson.core:jackson-databind:2.2.3"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.2.3"
    implementation "com.fasterxml.jackson.core:jackson-core:2.2.3"

    implementation 'org.aspectj:aspectjweaver:1.8.6'
    implementation 'log4j:log4j:1.2.17'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'jstl:jstl:1.2'
    compileOnly 'javax.servlet:servlet-api:2.5'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    enabled(false) //不进行测试 效果和gradle build -X test相同
    useJUnitPlatform()
    // include('com/xxx/**') 只执行某个包下的测试类
    // exclude('com/xxx/**') 排除某个包下的测试类
}

def map = new HashMap<String, Object>();
map.put("action", { println("执行Map中的任务") })

task(map, "task1", {
    //任务的配置段: 在配置阶段执行
    println "这是最简单的任务"
    //任务的行为: 在项目的执行阶段执行
    doFirst {
        println("task1 do first")
    }
    doLast {
        println("task1 do last")
    }
})

task("taskA", {
    group "abc"
    doLast {
        println("任务A执行了")
    }
})

task("taskB", {
    doLast {
        println("任务B执行了")
    }
})

task("taskC") {
    dependsOn = ['taskA', 'taskB']
    doLast {
        println("任务C执行了")
    }
}

//本地文件的操作方式(相对路径)
File testFile = file('src/conf.xml')
testFile.createNewFile()

ConfigurableFileTree configurableFileTree = fileTree('src/main')
configurableFileTree.include("**/*.java").forEach {item->{
    println item.name
}}
